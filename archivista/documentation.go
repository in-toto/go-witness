// Copyright 2025 The Witness Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package archivista

// Documentation provides structured documentation for the archivista package
type Documentation struct {
	Summary     string              `json:"summary" jsonschema:"title=Summary,description=Brief description of the package"`
	Description string              `json:"description" jsonschema:"title=Description,description=Detailed description of the package functionality"`
	Usage       []string            `json:"usage" jsonschema:"title=Usage,description=Common use cases and scenarios"`
	Examples    map[string]Example  `json:"examples" jsonschema:"title=Examples,description=Code examples demonstrating package usage"`
}

// Example represents a code example with explanation
type Example struct {
	Description string `json:"description" jsonschema:"title=Description,description=What this example demonstrates"`
	Code        string `json:"code" jsonschema:"title=Code,description=Example code snippet"`
}

// PackageDocumentation returns the documentation for the archivista package
func PackageDocumentation() Documentation {
	return Documentation{
		Summary: "Client library for interacting with Archivista attestation storage service",
		Description: `The archivista package provides a Go client for the Archivista service, which stores and retrieves attestations:
- Store signed DSSE envelopes containing attestations
- Retrieve attestations by gitoid (content-addressable)
- Search for attestations by subject digest
- Download attestation collections
- Support for custom HTTP headers and authentication`,
		Usage: []string{
			"Store attestations generated by witness",
			"Retrieve attestations for verification",
			"Build attestation transparency logs",
			"Query attestations by artifact digest",
			"Integrate with CI/CD pipelines for attestation storage",
		},
		Examples: map[string]Example{
			"store_attestation": {
				Description: "Store a DSSE envelope in Archivista",
				Code: `// Create client
client := archivista.New("https://archivista.example.com")

// Store envelope
response, err := client.Store(ctx, envelope)
if err != nil {
    log.Fatal(err)
}

fmt.Printf("Stored with gitoid: %s\n", response.Gitoid)`,
			},
			"retrieve_attestation": {
				Description: "Retrieve an attestation by gitoid",
				Code: `// Create client
client := archivista.New("https://archivista.example.com")

// Download by gitoid
envelope, err := client.Download(ctx, "gitoid:sha256:abcd1234...")
if err != nil {
    log.Fatal(err)
}

// Process retrieved envelope
fmt.Printf("Retrieved envelope with %d signatures\n", len(envelope.Signatures))`,
			},
			"search_by_subject": {
				Description: "Search for attestations by subject digest",
				Code: `// Create client with auth headers
headers := http.Header{
    "Authorization": []string{"Bearer " + token},
}
client := archivista.New("https://archivista.example.com", 
    archivista.WithHeaders(headers))

// Search by subject digest
results, err := client.SearchGitoids(ctx, 
    cryptoutil.DigestSet{
        {Hash: crypto.SHA256}: "abcd1234...",
    })
if err != nil {
    log.Fatal(err)
}

// Process results
for _, gitoid := range results {
    fmt.Printf("Found attestation: %s\n", gitoid)
}`,
			},
		},
	}
}

// ClientDocumentation provides documentation specific to Archivista client usage
type ClientDocumentation struct {
	Overview       string   `json:"overview" jsonschema:"title=Overview,description=Overview of Archivista client functionality"`
	Authentication []string `json:"authentication" jsonschema:"title=Authentication,description=Authentication methods supported"`
	Operations     []string `json:"operations" jsonschema:"title=Operations,description=Available client operations"`
}

// GetClientDocumentation returns documentation for Archivista client
func GetClientDocumentation() ClientDocumentation {
	return ClientDocumentation{
		Overview: "The Archivista client provides a simple interface to store and retrieve attestations from an Archivista server",
		Authentication: []string{
			"Bearer token via Authorization header",
			"Custom headers for proxy authentication",
			"mTLS client certificates (configured at HTTP client level)",
		},
		Operations: []string{
			"Store - Upload a DSSE envelope and receive its gitoid",
			"Download - Retrieve an envelope by its gitoid",
			"SearchGitoids - Find attestations by subject digest",
			"DownloadWithCollections - Retrieve attestations with collection metadata",
		},
	}
}