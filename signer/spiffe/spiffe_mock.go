// Copyright 2021 The Witness Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package spiffe provides a SPIFFE implementation of the SignerProvider interface.
// It uses the SPIFFE Workload API to fetch SVIDs and uses them to create signers.

// Code generated by MockGen. DO NOT EDIT.
// Source: signer/spiffe/spiffe.go
//
// Generated by this command:
//
//	mockgen -source=signer/spiffe/spiffe.go -destination=signer/spiffe/spiffe_mock.go -package=spiffe X509SVID,WorkloadAPI,SignerCreator
//
// Package spiffe is a generated GoMock package.
package spiffe

import (
	context "context"
	crypto "crypto"
	reflect "reflect"

	x509svid "github.com/spiffe/go-spiffe/v2/svid/x509svid"
	workloadapi "github.com/spiffe/go-spiffe/v2/workloadapi"
	cryptoutil "github.com/testifysec/go-witness/cryptoutil"
	gomock "go.uber.org/mock/gomock"
)

// MockX509SVID is a mock of X509SVID interface.
type MockX509SVID struct {
	ctrl     *gomock.Controller
	recorder *MockX509SVIDMockRecorder
}

// MockX509SVIDMockRecorder is the mock recorder for MockX509SVID.
type MockX509SVIDMockRecorder struct {
	mock *MockX509SVID
}

// NewMockX509SVID creates a new mock instance.
func NewMockX509SVID(ctrl *gomock.Controller) *MockX509SVID {
	mock := &MockX509SVID{ctrl: ctrl}
	mock.recorder = &MockX509SVIDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockX509SVID) EXPECT() *MockX509SVIDMockRecorder {
	return m.recorder
}

// DefaultSVID mocks base method.
func (m *MockX509SVID) DefaultSVID() *x509svid.SVID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultSVID")
	ret0, _ := ret[0].(*x509svid.SVID)
	return ret0
}

// DefaultSVID indicates an expected call of DefaultSVID.
func (mr *MockX509SVIDMockRecorder) DefaultSVID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultSVID", reflect.TypeOf((*MockX509SVID)(nil).DefaultSVID))
}

// MockWorkloadAPI is a mock of WorkloadAPI interface.
type MockWorkloadAPI struct {
	ctrl     *gomock.Controller
	recorder *MockWorkloadAPIMockRecorder
}

// MockWorkloadAPIMockRecorder is the mock recorder for MockWorkloadAPI.
type MockWorkloadAPIMockRecorder struct {
	mock *MockWorkloadAPI
}

// NewMockWorkloadAPI creates a new mock instance.
func NewMockWorkloadAPI(ctrl *gomock.Controller) *MockWorkloadAPI {
	mock := &MockWorkloadAPI{ctrl: ctrl}
	mock.recorder = &MockWorkloadAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkloadAPI) EXPECT() *MockWorkloadAPIMockRecorder {
	return m.recorder
}

// FetchX509Context mocks base method.
func (m *MockWorkloadAPI) FetchX509Context(ctx context.Context, opts ...workloadapi.ClientOption) (X509SVID, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchX509Context", varargs...)
	ret0, _ := ret[0].(X509SVID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchX509Context indicates an expected call of FetchX509Context.
func (mr *MockWorkloadAPIMockRecorder) FetchX509Context(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchX509Context", reflect.TypeOf((*MockWorkloadAPI)(nil).FetchX509Context), varargs...)
}

// MockSignerCreator is a mock of SignerCreator interface.
type MockSignerCreator struct {
	ctrl     *gomock.Controller
	recorder *MockSignerCreatorMockRecorder
}

// MockSignerCreatorMockRecorder is the mock recorder for MockSignerCreator.
type MockSignerCreatorMockRecorder struct {
	mock *MockSignerCreator
}

// NewMockSignerCreator creates a new mock instance.
func NewMockSignerCreator(ctrl *gomock.Controller) *MockSignerCreator {
	mock := &MockSignerCreator{ctrl: ctrl}
	mock.recorder = &MockSignerCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignerCreator) EXPECT() *MockSignerCreatorMockRecorder {
	return m.recorder
}

// NewSigner mocks base method.
func (m *MockSignerCreator) NewSigner(privateKey crypto.PrivateKey, opts ...cryptoutil.SignerOption) (cryptoutil.Signer, error) {
	m.ctrl.T.Helper()
	varargs := []any{privateKey}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewSigner", varargs...)
	ret0, _ := ret[0].(cryptoutil.Signer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSigner indicates an expected call of NewSigner.
func (mr *MockSignerCreatorMockRecorder) NewSigner(privateKey any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{privateKey}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSigner", reflect.TypeOf((*MockSignerCreator)(nil).NewSigner), varargs...)
}
